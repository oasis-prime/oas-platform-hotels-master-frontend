directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

"""
The @specifiedBy built-in directive is used within the type system definition
language to provide a scalar specification URL for specifying the behavior of
custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar _Any

scalar _FieldSet

type _Service {
  sdl: String
}

type Address {
  content: String
  street: String
  number: String
}

type AvailabilityCancellationPolicies {
  amount: String
  from: String
}

type AvailabilityData {
  availability: [AvailabilityHotels!]!
}

input AvailabilityFilterInput {
  maxHotels: Int
  maxRooms: Int
  minRate: Int
  maxRate: Int
  maxRatesPerRoom: Int
}

input AvailabilityHotelInput {
  hotel: [Int!]!
}

type AvailabilityHotels {
  code: Int
  name: String
  categoryCode: String
  categoryName: String
  destinationCode: String
  destinationName: String
  zoneCode: Int
  zoneName: String
  latitude: String
  longitude: String
  minRate: String
  maxRate: String
  currency: String
  rooms: [AvailabilityRooms]
}

input AvailabilityInput {
  hotels: AvailabilityHotelInput!
  stay: AvailabilityStayInput!
  occupancies: [AvailabilityOccupanciesInput!]!
  language: LanguageEnum!
  filter: AvailabilityFilterInput
}

input AvailabilityOccupanciesInput {
  rooms: Int!
  adults: Int!
  children: Int!
}

type AvailabilityRates {
  rateKey: String
  rateClass: String
  rateType: String
  net: String
  discount: String
  discountPCT: String
  sellingRate: String
  allotment: Int
  paymentType: String
  packaging: Boolean
  boardCode: String
  boardName: String
  rooms: Int
  adults: Int
  children: Int
  cancellationPolicies: [AvailabilityCancellationPolicies]
}

type AvailabilityRooms {
  code: String
  name: String
  rates: [AvailabilityRates]
}

input AvailabilityStayInput {
  checkIn: String!
  checkOut: String!
}

type BookingData {
  id: String
}

input BookingInput {
  id: String
}

type City {
  content: String
}

type Coordinates {
  longitude: Float
  latitude: Float
}

type Description {
  content: String
}

type Facilities {
  facilityName: String
  facilityCode: Int
  facilityGroupName: String
  facilityGroupCode: Int
  order: Int
  number: Int
  voucher: Boolean
}

input FacilitiesInput {
  groupCode: Int!
  offset: Int!
  limit: Int!
}

input GetPlacesInput {
  query: String
}

input HotelInterestPointsInput {
  offset: Int!
  limit: Int!
}

input HotelIssuesInput {
  offset: Int!
  limit: Int!
}

input HotelPhonesInput {
  offset: Int!
  limit: Int!
}

input HotelRoomsInput {
  offset: Int!
  limit: Int!
}

type Hotels {
  hotelName: String
  language: LanguageEnum!
  code: Int
  type: HotelTypeEnum!
  countryCode: String
  stateCode: String
  destinationCode: String
  zoneCode: Int
  categoryCode: String
  categoryGroupCode: String
  chainCode: String
  accommodationTypeCode: String
  postalCode: String
  email: String
  web: String
  lastUpdate: String
  S2C: String
  ranking: Int
  images(input: ImagesInput): [Images]
  interestPoints(input: HotelInterestPointsInput): [InterestPoints]
  issues(input: HotelIssuesInput): [Issues]
  facilities(input: FacilitiesInput): [Facilities]
  rooms(input: HotelRoomsInput): [Rooms]
  phones(input: HotelPhonesInput): [Phones]
  city: City
  address: Address
  amenityCodes: [Int]
  segmentCodes: [Int]
  boardCodes: [String]
  coordinates: Coordinates
  description: Description
  name: Name
}

type HotelsData {
  hotels: [Hotels!]!
  pagination: PaginationType!
}

input HotelsGeolocationInput {
  latitude: Float!
  longitude: Float!
  radius: Int!
}

input HotelsInput {
  language: LanguageEnum!
  pagination: PaginationInput!
  geolocation: HotelsGeolocationInput
  keywords: HotelsKeywordsInput
  id: Int
  occupancies: HotelsOccupanciesInput
}

input HotelsKeywordsInput {
  keyword: [String!]!
}

input HotelsOccupanciesInput {
  rooms: Int!
  adults: Int!
  children: Int!
}

input HotelsStayInput {
  checkIn: String!
  checkOut: String!
}

enum HotelTypeEnum {
  DE
  HB
  CG
}

type Images {
  imageTypeCode: String
  path: String
  order: Int
  visualOrder: Int
}

input ImagesInput {
  typeCode: String!
  offset: Int!
  limit: Int!
}

type InterestPoints {
  facilityCode: Int
  facilityGroupCode: Int
  order: Int
  poiName: String
  distance: String
}

type Issues {
  issueCode: String
  issueType: String
  dateFrom: String
  dateTo: String
  order: Int
  alternative: Boolean
}

enum LanguageEnum {
  TAI
  ENG
}

type Name {
  content: String
}

input PaginationInput {
  page: Int!
  pageSize: Int!
  orderBy: String
}

type PaginationType {
  page: Int!
  pageSize: Int!
  total: Int!
}

type Phones {
  phoneNumber: String
  phoneType: String
}

type Places {
  description: String!
  placeId: String!
}

type PlacesData {
  places: [Places]
}

type Query {
  getPlaces(input: GetPlacesInput!): PlacesData!
  getAvailability(input: AvailabilityInput!): AvailabilityData!
  getHotels(input: HotelsInput!): HotelsData!
  _service: _Service!
}

type RoomFacilities {
  facilityName: String
  facilityCode: Int
  facilityGroupName: String
  facilityGroupCode: Int
  indLogic: Boolean
  number: Int
  voucher: Boolean
}

type Rooms {
  hotelCode: Int
  hotelType: HotelTypeEnum!
  roomCode: String
  isParentRoom: Boolean
  minPax: Int
  maxPax: Int
  maxAdults: Int
  maxChildren: Int
  minAdults: Int
  roomType: String
  characteristicCode: String
  roomStays(input: StaysInput): [RoomStays]
  roomFacilities(input: FacilitiesInput): [RoomFacilities]
  roomImages(input: ImagesInput): [Images]
}

type RoomStayFacilities {
  facilityName: String
  facilityCode: Int
  facilityGroupName: String
  facilityGroupCode: Int
  number: Int
}

type RoomStays {
  stayType: String
  order: String
  description: String
  roomStayFacilities: [RoomStayFacilities]
}

input StaysInput {
  offset: Int!
  limit: Int!
}
